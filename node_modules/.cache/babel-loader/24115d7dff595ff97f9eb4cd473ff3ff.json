{"ast":null,"code":"var _jsxFileName = \"/Users/hannahsmith/Desktop/farleyclick/src/components/Game/index.js\";\nimport React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Clicked from \"../Clicked\";\nimport Navbar from \"../Navbar\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data,\n      score: 0,\n      topScore: 0\n    };\n\n    this.shuffle = data => {\n      let i = data.length - 1;\n\n      while (i > 0) {\n        const j = Math.floor(Math.random() * (i + 1));\n        const temp = data[i];\n        data[i] = data[j];\n        data[j] = temp;\n        i--;\n      }\n\n      return data;\n    };\n\n    this.ItemClicked = id => {\n      //     console.log(\"itemClicked\")\n      //     // shuffleData ();\n      //     // this.shuffle();\n      //     //  1. iterates through the characters array and check to see that it exist\n      //     // 2. check to see if it has been clicked\n      //     //3. if it has been clicked then we compare current score against high score and if current score is higher then high score then set \\high score to be curret score and tehn set current score to 0\n      //     //4. if it has not been clicked \n      //     //- score increments\n      //     //- and we set clicked to true\n      //     //5. call on shuffle\n      let guessedCorrectly = false;\n      const newData = this.state.data.map(item => {\n        const newItem = { ...item\n        };\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectClick(newData) : this.handleIncorrectClick(newData);\n    };\n\n    this.handleCorrectClick = newData => {\n      const {\n        topScore,\n        score\n      } = this.state;\n      const newScore = score + 1;\n      const newTopScore = Math.max(newScore, topScore);\n      this.setState({\n        data: this.shuffle(newData),\n        score: newScore,\n        topScore: newTopScore\n      });\n    };\n\n    this.handleIncorrectClick = data => {\n      this.setState({\n        data: this.resetScore(data),\n        score: 0\n      });\n    };\n\n    this.resetData = data => {\n      const resetData = data.map(item => ({ ...item,\n        clicked: false\n      }));\n      return this.shuffle(resetData);\n    };\n\n    this.ItemClicked = id => {\n      let guessedCorrectly = false;\n      const newData = this.state.data.map(item => {\n        const newItem = { ...item\n        };\n\n        if (newItem.id === id) {\n          if (!newItem.clicked) {\n            newItem.clicked = true;\n            guessedCorrectly = true;\n          }\n        }\n\n        return newItem;\n      });\n      guessedCorrectly ? this.handleCorrectClick(newData) : this.handleIncorrectClick(newData);\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      data: this.shuffle(this.state.data)\n    });\n  } //[{id: 1, name: \"Farley\" , image\" \"/img/meow.jpg, clicked: false\"}]\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }\n    }, this.state.data.map(item => /*#__PURE__*/React.createElement(Clicked, {\n      key: item.id,\n      id: item.id,\n      handleClick: this.ItemClicked,\n      image: item.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/hannahsmith/Desktop/farleyclick/src/components/Game/index.js"],"names":["React","Component","Container","Clicked","Navbar","data","Game","state","score","topScore","shuffle","i","length","j","Math","floor","random","temp","ItemClicked","id","guessedCorrectly","newData","map","item","newItem","clicked","handleCorrectClick","handleIncorrectClick","newScore","newTopScore","max","setState","resetScore","resetData","componentDidMount","render","image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Clicked from \"../Clicked\";\nimport Navbar from \"../Navbar\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffle(this.state.data) });\n  }\n//[{id: 1, name: \"Farley\" , image\" \"/img/meow.jpg, clicked: false\"}]\n  shuffle = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  ItemClicked = id => {\n        //     console.log(\"itemClicked\")\n    //     // shuffleData ();\n    //     // this.shuffle();\n    //     //  1. iterates through the characters array and check to see that it exist\n    //     // 2. check to see if it has been clicked\n    //     //3. if it has been clicked then we compare current score against high score and if current score is higher then high score then set \\high score to be curret score and tehn set current score to 0\n    //     //4. if it has not been clicked \n    //     //- score increments\n    //     //- and we set clicked to true\n    //     //5. call on shuffle\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectClick(newData)\n      : this.handleIncorrectClick(newData);\n  };\n\n\n        // update state\n        //on that obj you will need to toggle clicked to true\n        // compare current score to high score\n        // call shuffle\n  handleCorrectClick = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffle(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n          //  reset state to original values\n        // call shuffle\n  handleIncorrectClick = data => {\n    this.setState({\n      data: this.resetScore(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffle(resetData);\n  };\n\n\n  ItemClicked = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectClick(newData)\n      : this.handleIncorrectClick(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Container>\n          {this.state.data.map(item => (\n            <Clicked\n              key={item.id}\n              id={item.id}\n              handleClick={this.ItemClicked}\n              image={item.image}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}