{"version":3,"sources":["components/Container/index.js","components/Clicked/index.js","components/Navbar/index.js","components/Game/index.js","App.js","registerServiceWorker.js","index.js"],"names":["Container","props","className","children","Clicked","role","onClick","handleClick","id","style","backgroundImage","image","Navbar","href","score","topScore","Game","state","data","shuffle","i","length","j","Math","floor","random","temp","ItemClicked","guessedCorrectly","newData","map","item","newItem","clicked","handleCorrectClick","handleIncorrectClick","newScore","newTopScore","max","setState","resetScore","resetData","this","key","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f5f23bd5.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Clicked(props) {\n  return (\n    <div\n      role=\"img\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`clicking`}\n    />\n  );\n}\n\nexport default Clicked;","\n\nimport React from \"react\";\nimport \"./style.css\";\n\n// Component for the Navbar\n\nfunction Navbar(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/\">Clicky Game</a>\n          </li>\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n\n  );\n}\n\nexport default Navbar;\n\n\n","import React, { Component } from \"react\";\nimport Container from \"../Container\";\nimport Clicked from \"../Clicked\";\nimport Navbar from \"../Navbar\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffle(this.state.data) });\n  }\n//[{id: 1, name: \"Farley\" , image\" \"/img/meow.jpg, clicked: false\"}]\n  shuffle = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  ItemClicked = id => {\n        //     console.log(\"itemClicked\")\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectClick(newData)\n      : this.handleIncorrectClick(newData);\n  };\n\n\n        // update state\n        //on that obj you will need to toggle clicked to true\n        // compare current score to high score\n        // call shuffle\n  handleCorrectClick = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffle(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n          //  reset state to original values\n        // call shuffle\n  handleIncorrectClick = data => {\n    this.setState({\n      data: this.resetScore(data),\n      score: 0\n    });\n  };\n\n  resetScore = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffle(resetData);\n  };\n\n\n  render() {\n    return (\n      <div>\n        <Navbar score={this.state.score} topScore={this.state.topScore} />\n        <Container>\n          {this.state.data.map(item => (\n            <Clicked\n              key={item.id}\n              id={item.id}\n              handleClick={this.ItemClicked}\n              image={item.image}\n            />\n          ))}\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}